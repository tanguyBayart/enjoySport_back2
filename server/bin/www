#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("server:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * ROUTES BEGIN
 */
app.get("/cardio", function (req, res) {
  const sql_trainings_cardio = "SELECT * from `enjoysport`.`training_cardio`";

  connection.query(sql_trainings_cardio, function (error, results, fields) {
    // if (error) throw error;
    console.log("sql_trainings_cardio request result: ", results);
    res.send(results);
  });
});

app.get("/muscu", function (req, res) {
  const sql_trainings_muscu =
    "SELECT tme.*, DATE_FORMAT(tms.muscu_session_date, '%d/%m/%Y') FROM `enjoysport`.`training_muscu_exercise` AS tme,`enjoysport`.`training_muscu_session` AS tms WHERE tme.training_muscu_session_id = tms.muscu_session_id";

  connection.query(sql_trainings_muscu, function (error, results, fields) {
    if (error) throw error;
    console.log("sql_trainings_muscu request result: ", results);
  });
  res.send(results);
});

/**
 * ROUTES END
 */

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log(
    `Server is listening on port ${port}  http://localhost:${port}/ !!`
  );
});
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
